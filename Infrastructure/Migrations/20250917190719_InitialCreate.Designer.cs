// <auto-generated />
using System;
using Api_Mediconnet.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api_Mediconnet.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917190719_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TArea", b =>
                {
                    b.Property<int>("NAreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(12)")
                        .HasColumnName("NAreaID");

                    b.Property<string>("CDescripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("CDescripcion");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CNombre");

                    b.HasKey("NAreaID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNombre" }, "CNombre")
                        .IsUnique();

                    b.ToTable("TArea", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TCita", b =>
                {
                    b.Property<int>("NCitaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(12)")
                        .HasColumnName("NCitaID");

                    b.Property<string>("CObservacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CObservacion");

                    b.Property<TimeSpan>("DDuracion")
                        .HasColumnType("time")
                        .HasColumnName("DDuracion");

                    b.Property<DateTime>("DFecha")
                        .HasColumnType("datetime")
                        .HasColumnName("DFecha");

                    b.Property<DateTime>("DFechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("DFechaRegistro");

                    b.Property<TimeSpan>("DHora")
                        .HasColumnType("time")
                        .HasColumnName("DHora");

                    b.Property<int>("EstadoNEstadoCitaID")
                        .HasColumnType("int(6)");

                    b.Property<int>("NDiaSemanaFK")
                        .HasColumnType("int(12)");

                    b.Property<int>("NEstadoCitaFK")
                        .HasColumnType("int(12)")
                        .HasColumnName("NEstadoCitaFK");

                    b.Property<int>("NPacienteFK")
                        .HasColumnType("int(12)")
                        .HasColumnName("NPacienteFK");

                    b.Property<int>("NProfesionalFK")
                        .HasColumnType("int(12)")
                        .HasColumnName("NProfesionalFK");

                    b.Property<int>("PacienteNPacienteID")
                        .HasColumnType("int(32)");

                    b.Property<int>("ProfesionalNProfesionalID")
                        .HasColumnType("int(32)");

                    b.HasKey("NCitaID")
                        .HasName("PRIMARY");

                    b.HasIndex("EstadoNEstadoCitaID");

                    b.HasIndex("NDiaSemanaFK");

                    b.HasIndex("PacienteNPacienteID");

                    b.HasIndex("ProfesionalNProfesionalID");

                    b.ToTable("TCita", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TCodigoVerificacion", b =>
                {
                    b.Property<int>("NCodigoVerificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(32)")
                        .HasColumnName("NCodigoVerificacionID");

                    b.Property<bool>("BUsado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("BUsado");

                    b.Property<string>("CCodigo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CCodigo");

                    b.Property<DateTime>("DFechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("DFechaCreacion");

                    b.Property<DateTime>("DFechaExpiracion")
                        .HasColumnType("datetime")
                        .HasColumnName("DFechaExpiracion");

                    b.Property<int>("NIntentos")
                        .HasColumnType("int(11)")
                        .HasColumnName("NIntentos");

                    b.Property<string>("NTipoCodigo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("NTipoCodigo");

                    b.Property<int>("NUsuarioFK")
                        .HasColumnType("int(6)")
                        .HasColumnName("NUsuarioFK");

                    b.HasKey("NCodigoVerificacionID")
                        .HasName("PRIMARY");

                    b.HasIndex("NUsuarioFK");

                    b.HasIndex(new[] { "CCodigo" }, "CCodigo")
                        .IsUnique();

                    b.ToTable("TCodigoVerificacion", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TDiaSemana", b =>
                {
                    b.Property<int>("NDiaSemanaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(12)")
                        .HasColumnName("NDiaSemanaID");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CNombre");

                    b.HasKey("NDiaSemanaID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNombre" }, "CNombre")
                        .IsUnique()
                        .HasDatabaseName("CNombre1");

                    b.ToTable("TDiaSemana", (string)null);

                    b.HasData(
                        new
                        {
                            NDiaSemanaID = 1,
                            CNombre = "Lunes"
                        },
                        new
                        {
                            NDiaSemanaID = 2,
                            CNombre = "Martes"
                        },
                        new
                        {
                            NDiaSemanaID = 3,
                            CNombre = "Miércoles"
                        },
                        new
                        {
                            NDiaSemanaID = 4,
                            CNombre = "Jueves"
                        },
                        new
                        {
                            NDiaSemanaID = 5,
                            CNombre = "Viernes"
                        },
                        new
                        {
                            NDiaSemanaID = 6,
                            CNombre = "Sábado"
                        },
                        new
                        {
                            NDiaSemanaID = 7,
                            CNombre = "Domingo"
                        });
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TEspecialidad", b =>
                {
                    b.Property<int>("NEspecialidadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(12)")
                        .HasColumnName("NEspecialidadID");

                    b.Property<string>("CDescripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CDescripcion");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CNombre");

                    b.HasKey("NEspecialidadID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNombre" }, "CNombre")
                        .IsUnique()
                        .HasDatabaseName("CNombre2");

                    b.ToTable("TEspecialidad", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TEstadoCita", b =>
                {
                    b.Property<int>("NEstadoCitaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(6)")
                        .HasColumnName("NEstadoCitaID");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CNombre");

                    b.HasKey("NEstadoCitaID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNombre" }, "CNombre")
                        .IsUnique()
                        .HasDatabaseName("CNombre3");

                    b.ToTable("TEstadoCita", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TEstadoUsuario", b =>
                {
                    b.Property<int>("NEstadoUsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(12)")
                        .HasColumnName("NEstadoUsuarioID");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CNombre");

                    b.HasKey("NEstadoUsuarioID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNombre" }, "CNombre")
                        .IsUnique()
                        .HasDatabaseName("CNombre4");

                    b.ToTable("TEstadoUsuario", (string)null);

                    b.HasData(
                        new
                        {
                            NEstadoUsuarioID = 1,
                            CNombre = "Activo"
                        },
                        new
                        {
                            NEstadoUsuarioID = 2,
                            CNombre = "Inactivo"
                        });
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TEstadoVerificacion", b =>
                {
                    b.Property<int>("NEstadoVerificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(12)")
                        .HasColumnName("NEstadoVerificacion");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CNombre");

                    b.HasKey("NEstadoVerificacionID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNombre" }, "CNombre")
                        .IsUnique()
                        .HasDatabaseName("CNombre5");

                    b.ToTable("TEstadoVerificacion", (string)null);

                    b.HasData(
                        new
                        {
                            NEstadoVerificacionID = 1,
                            CNombre = "Verificado"
                        },
                        new
                        {
                            NEstadoVerificacionID = 2,
                            CNombre = "No Verificado"
                        });
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TGrupoSanguineo", b =>
                {
                    b.Property<int>("NGrupoSanguineoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(12)")
                        .HasColumnName("NGrupoSanguineoID");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CNombre");

                    b.HasKey("NGrupoSanguineoID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNombre" }, "CNombre")
                        .IsUnique()
                        .HasDatabaseName("CNombre6");

                    b.ToTable("TGrupoSanguineo", (string)null);

                    b.HasData(
                        new
                        {
                            NGrupoSanguineoID = 1,
                            CNombre = "A+"
                        },
                        new
                        {
                            NGrupoSanguineoID = 2,
                            CNombre = "A-"
                        },
                        new
                        {
                            NGrupoSanguineoID = 3,
                            CNombre = "B+"
                        },
                        new
                        {
                            NGrupoSanguineoID = 4,
                            CNombre = "B-"
                        },
                        new
                        {
                            NGrupoSanguineoID = 5,
                            CNombre = "AB+"
                        },
                        new
                        {
                            NGrupoSanguineoID = 6,
                            CNombre = "AB-"
                        },
                        new
                        {
                            NGrupoSanguineoID = 7,
                            CNombre = "O+"
                        },
                        new
                        {
                            NGrupoSanguineoID = 8,
                            CNombre = "O-"
                        });
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TLogins", b =>
                {
                    b.Property<int>("NLoginID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(32)")
                        .HasColumnName("NLoginID");

                    b.Property<DateTime>("DFechaLogin")
                        .HasColumnType("DateTime")
                        .HasColumnName("DFechaLogin");

                    b.Property<int>("NUsuarioFK")
                        .HasColumnType("int(32)");

                    b.HasKey("NLoginID")
                        .HasName("PRIMARY");

                    b.HasIndex("NUsuarioFK");

                    b.ToTable("TLogins", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TPaciente", b =>
                {
                    b.Property<int>("NPacienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(32)")
                        .HasColumnName("NPacienteID");

                    b.Property<string>("CAlergiasGenerales")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("CAlergiasGenerales");

                    b.Property<int>("NGrupoSanguineoFK")
                        .HasColumnType("int(6)")
                        .HasColumnName("NGrupoSanguineoFK");

                    b.Property<int>("NPersonaFK")
                        .HasColumnType("int(32)")
                        .HasColumnName("NPersonaFK");

                    b.HasKey("NPacienteID")
                        .HasName("PRIMARY");

                    b.HasIndex("NGrupoSanguineoFK");

                    b.HasIndex("NPersonaFK")
                        .IsUnique();

                    b.ToTable("TPaciente", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TPersona", b =>
                {
                    b.Property<int>("NPersonaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(32)")
                        .HasColumnName("NPersonaID");

                    b.Property<string>("CDireccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CDireccion");

                    b.Property<string>("CNroConctacto")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CNroConctacto");

                    b.Property<string>("CNroIdentificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CNroIdentificacion");

                    b.Property<DateTime>("DFechaNacimiento")
                        .HasColumnType("DateTime")
                        .HasColumnName("DFechaNacimiento");

                    b.Property<string>("ESexo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ESexo");

                    b.Property<int>("NTipoIdentificacionFK")
                        .HasColumnType("int(32)")
                        .HasColumnName("NTipoIdentificacionFK");

                    b.Property<int>("NUsuarioFK")
                        .HasColumnType("int(32)")
                        .HasColumnName("NUsuarioFK");

                    b.HasKey("NPersonaID")
                        .HasName("PRIMARY");

                    b.HasIndex("NTipoIdentificacionFK");

                    b.HasIndex("NUsuarioFK")
                        .IsUnique();

                    b.HasIndex(new[] { "CNroIdentificacion" }, "CNroIdentificacion")
                        .IsUnique();

                    b.ToTable("TPersona", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TProfesional", b =>
                {
                    b.Property<int>("NProfesionalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(32)")
                        .HasColumnName("NProfesionalID");

                    b.Property<string>("CBiografia")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("CBiografia");

                    b.Property<string>("CRegistroProfesional")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CRegistroProfesional");

                    b.Property<DateTime>("DFechaContratacion")
                        .HasColumnType("DateTime")
                        .HasColumnName("DFechaContratacion");

                    b.Property<string>("ETipoProfesional")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ETipoProfesional");

                    b.Property<int>("NAreaFK")
                        .HasColumnType("int(12)");

                    b.Property<int>("NEspecialidadFK")
                        .HasColumnType("int(12)");

                    b.Property<int>("NPersonaFK")
                        .HasColumnType("int(32)")
                        .HasColumnName("NPersonaFK");

                    b.HasKey("NProfesionalID")
                        .HasName("PRIMARY");

                    b.HasIndex("NAreaFK");

                    b.HasIndex("NEspecialidadFK");

                    b.HasIndex("NPersonaFK")
                        .IsUnique();

                    b.HasIndex(new[] { "CRegistroProfesional" }, "CRegistroProfesional")
                        .IsUnique();

                    b.ToTable("TProfesional", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TRol", b =>
                {
                    b.Property<int>("NRolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(32)")
                        .HasColumnName("NRolID");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CNombre");

                    b.HasKey("NRolID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNombre" }, "CNombre")
                        .IsUnique()
                        .HasDatabaseName("CNombre7");

                    b.ToTable("TRol", (string)null);

                    b.HasData(
                        new
                        {
                            NRolID = 1,
                            CNombre = "Administrador"
                        },
                        new
                        {
                            NRolID = 2,
                            CNombre = "Paciente"
                        },
                        new
                        {
                            NRolID = 3,
                            CNombre = "Medico"
                        });
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TTipoIdentificacion", b =>
                {
                    b.Property<int>("NTipoIdentificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(12)")
                        .HasColumnName("NTipoIdentificacion");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CNombre");

                    b.HasKey("NTipoIdentificacionID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNombre" }, "CNombre")
                        .IsUnique()
                        .HasDatabaseName("CNombre8");

                    b.ToTable("TTipoIdentificacion", (string)null);

                    b.HasData(
                        new
                        {
                            NTipoIdentificacionID = 1,
                            CNombre = "Cédula de ciudadanía"
                        },
                        new
                        {
                            NTipoIdentificacionID = 2,
                            CNombre = "Tarjeta de identidad"
                        },
                        new
                        {
                            NTipoIdentificacionID = 3,
                            CNombre = "Registro civil de nacimiento"
                        },
                        new
                        {
                            NTipoIdentificacionID = 4,
                            CNombre = "Cédula de extranjería"
                        },
                        new
                        {
                            NTipoIdentificacionID = 5,
                            CNombre = "Pasaporte"
                        });
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TUsuario", b =>
                {
                    b.Property<int>("NUsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(32)")
                        .HasColumnName("nUsuarioID");

                    b.Property<string>("CApellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CApellido");

                    b.Property<string>("CEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CEmail");

                    b.Property<string>("CNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CNombre");

                    b.Property<string>("CPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CPassword");

                    b.Property<DateTime>("DFechaRegistro")
                        .HasColumnType("DateTime")
                        .HasColumnName("DFechaRegistro");

                    b.Property<int>("NEstadoUsuarioFK")
                        .HasColumnType("int(12)")
                        .HasColumnName("NEstadoUsuarioFK");

                    b.Property<int>("NEstadoVerificacionFK")
                        .HasColumnType("int(12)")
                        .HasColumnName("NEstadoVerificacionFK");

                    b.Property<int>("NRolFK")
                        .HasColumnType("int(12)")
                        .HasColumnName("NRolFK");

                    b.HasKey("NUsuarioID")
                        .HasName("PRIMARY");

                    b.HasIndex("NEstadoUsuarioFK");

                    b.HasIndex("NEstadoVerificacionFK");

                    b.HasIndex("NRolFK");

                    b.HasIndex(new[] { "CEmail" }, "CEmail")
                        .IsUnique();

                    b.ToTable("TUsuario", (string)null);
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TCita", b =>
                {
                    b.HasOne("Api_Mediconnet.Domain.Entities.TEstadoCita", "Estado")
                        .WithMany("Cita")
                        .HasForeignKey("EstadoNEstadoCitaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api_Mediconnet.Domain.Entities.TDiaSemana", "DiaSemana")
                        .WithMany("Cita")
                        .HasForeignKey("NDiaSemanaFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Cita_DiaSemana");

                    b.HasOne("Api_Mediconnet.Domain.Entities.TPaciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteNPacienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api_Mediconnet.Domain.Entities.TProfesional", "Profesional")
                        .WithMany()
                        .HasForeignKey("ProfesionalNProfesionalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaSemana");

                    b.Navigation("Estado");

                    b.Navigation("Paciente");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TCodigoVerificacion", b =>
                {
                    b.HasOne("Api_Mediconnet.Domain.Entities.TUsuario", "Usuario")
                        .WithMany("CodigoVerificacion")
                        .HasForeignKey("NUsuarioFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CodigoVerificacion_Usuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TLogins", b =>
                {
                    b.HasOne("Api_Mediconnet.Domain.Entities.TUsuario", "Usuario")
                        .WithMany("Logins")
                        .HasForeignKey("NUsuarioFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Usuario_Logins");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TPaciente", b =>
                {
                    b.HasOne("Api_Mediconnet.Domain.Entities.TGrupoSanguineo", "GrupoSanguineo")
                        .WithMany("Paciente")
                        .HasForeignKey("NGrupoSanguineoFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Paciente_GrupoSanguineo");

                    b.HasOne("Api_Mediconnet.Domain.Entities.TPersona", "Persona")
                        .WithOne("Paciente")
                        .HasForeignKey("Api_Mediconnet.Domain.Entities.TPaciente", "NPersonaFK");

                    b.Navigation("GrupoSanguineo");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TPersona", b =>
                {
                    b.HasOne("Api_Mediconnet.Domain.Entities.TTipoIdentificacion", "TipoIdentificacion")
                        .WithMany("Personas")
                        .HasForeignKey("NTipoIdentificacionFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Personas_TipoIdentificacion");

                    b.HasOne("Api_Mediconnet.Domain.Entities.TUsuario", "Usuario")
                        .WithOne("Persona")
                        .HasForeignKey("Api_Mediconnet.Domain.Entities.TPersona", "NUsuarioFK");

                    b.Navigation("TipoIdentificacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TProfesional", b =>
                {
                    b.HasOne("Api_Mediconnet.Domain.Entities.TArea", "Area")
                        .WithMany("Profesional")
                        .HasForeignKey("NAreaFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Profesional_Area");

                    b.HasOne("Api_Mediconnet.Domain.Entities.TEspecialidad", "Especialidad")
                        .WithMany("Profesional")
                        .HasForeignKey("NEspecialidadFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Profesional_Especialidad");

                    b.HasOne("Api_Mediconnet.Domain.Entities.TPersona", "Personas")
                        .WithOne("Profesional")
                        .HasForeignKey("Api_Mediconnet.Domain.Entities.TProfesional", "NPersonaFK");

                    b.Navigation("Area");

                    b.Navigation("Especialidad");

                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TUsuario", b =>
                {
                    b.HasOne("Api_Mediconnet.Domain.Entities.TEstadoUsuario", "EstadoUsuario")
                        .WithMany("Usuario")
                        .HasForeignKey("NEstadoUsuarioFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Usuario_EstadoUsuario");

                    b.HasOne("Api_Mediconnet.Domain.Entities.TEstadoVerificacion", "EstadoVerificacion")
                        .WithMany("Usuario")
                        .HasForeignKey("NEstadoVerificacionFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Usuario_EstadoVerificacion");

                    b.HasOne("Api_Mediconnet.Domain.Entities.TRol", "Rol")
                        .WithMany("Usuario")
                        .HasForeignKey("NRolFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Usuario_Rol");

                    b.Navigation("EstadoUsuario");

                    b.Navigation("EstadoVerificacion");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TArea", b =>
                {
                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TDiaSemana", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TEspecialidad", b =>
                {
                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TEstadoCita", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TEstadoUsuario", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TEstadoVerificacion", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TGrupoSanguineo", b =>
                {
                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TPersona", b =>
                {
                    b.Navigation("Paciente");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TRol", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TTipoIdentificacion", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Api_Mediconnet.Domain.Entities.TUsuario", b =>
                {
                    b.Navigation("CodigoVerificacion");

                    b.Navigation("Logins");

                    b.Navigation("Persona")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
